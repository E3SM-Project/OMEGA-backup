#!/usr/bin/env python

"""
build ww3 library
"""
import sys, os, shutil
from distutils.spawn import find_executable

_CIMEROOT = os.environ.get("CIMEROOT")
if _CIMEROOT is None:
    raise SystemExit("ERROR: must set CIMEROOT environment variable")

_LIBDIR = os.path.join(_CIMEROOT, "scripts", "Tools")
sys.path.append(_LIBDIR)

from standard_script_setup import *
from CIME.buildlib         import parse_input
from CIME.case             import Case
from CIME.utils            import expect, run_bld_cmd_ensure_logging, safe_copy

logger = logging.getLogger(__name__)

###############################################################################
def buildlib(bldroot, installpath, case):
###############################################################################
    caseroot       = case.get_value("CASEROOT")
    casebuild      = case.get_value("CASEBUILD")
    casetools      = case.get_value("CASETOOLS")
    srcroot        = case.get_value("SRCROOT")
    mach           = case.get_value("MACH")
    objroot        = case.get_value("OBJROOT")
    libroot        = case.get_value("LIBROOT")
    gmake_j        = case.get_value("GMAKE_J")
    gmake          = case.get_value("GMAKE")
    compiler       = case.get_value("COMPILER")
    mpilib         = case.get_value("MPILIB")
    comp_interface = case.get_value("COMP_INTERFACE")
    exeroot        = case.get_value("EXEROOT")
    ninst_value    = case.get_value("NINST_VALUE")
    rundir         = case.get_value("RUNDIR")

    # Define WW3 repository directories
    repodir  = "{}/components/ww3/src/source".format(srcroot)
    modeldir = "{}/WW3/model".format(repodir)
    bindir   = "{}/bin".format(modeldir)
    exedir   = "{}/exe".format(modeldir)
    tmpdir   = "{}/tmp".format(modeldir)

    # Run w3_setup to create wwatch3.env file
    env_file = os.path.join(bindir, "wwatch3.env")
    if os.path.exists(env_file):
        os.remove(env_file)

    comp = compiler.capitalize()
    safe_copy(os.path.join(repodir, "switch_E3SM"), bindir)

    inp_file = os.path.join(bindir, "w3_setup.inp")
    with open(inp_file, "w") as fd:
        fd.write(
"""y

ifort
icc
{}


y
""".format(tmpdir))

    run_bld_cmd_ensure_logging("./w3_setup {} -c {} -s E3SM < w3_setup.inp".format(modeldir, comp), logger, fromdir=bindir)
    os.remove(inp_file)
    os.remove(os.path.join(bindir, "switch_E3SM"))

    # Generate pre-processed WW3 source code
    tarfile = "{}/work/ww3_shel.tar.gz".format(modeldir)
    run_bld_cmd_ensure_logging("./w3_source ww3_shel", logger, from_dir=bindir)
    shutil.move(tarfile, tmpdir)
    run_bld_cmd_ensure_logging("tar -xzvf ww3_shel.tar.gz", logger, from_dir=tmpdir)

    with open(os.path.join(casebuild, "wavconf", "Filepath"), "w") as fd:
        fd.write(
"""{}/SourceMods/src.ww3
{}
{}/components/ww3/src/cpl
""".format(caseroot, tmpdir, srcroot))

    # Compile ww3_grid and move to run directory
    orig_env = dict(os.environ)

    try:
        os.environ["WWATCH3_NETCDF"] = "NC4"
        ncconfig = find_executable("nc-config")
        os.environ["NETCDF_CONFIG"] = ncconfig

        with open(inp_file, "w") as fd:
            fd.write("k\n")

        run_bld_cmd_ensure_logging("./w3_make ww3_grid < w3_make.inp > out.txt", logger, from_dir=bindir)
        os.remove(inp_file)
        shutil.move(os.path.join(bindir, "ww3_grid"), rundir)

        # Run ww3_grid
        run_bld_cmd_ensure_logging("./ww3_grid", from_dir=rundir)
    finally:
        os.environ.clear()
        os.environ.update(_environ)

    # Cleanup untracked file
    os.remove(os.path.join(modeldir, "makefile"))

###############################################################################
def _main_func():
###############################################################################
    caseroot, libroot, bldroot = parse_input(sys.argv)
    with Case(caseroot, read_only=False) as case:
        buildlib(bldroot, libroot, case)

###############################################################################

if __name__ == "__main__":
    _main_func()
